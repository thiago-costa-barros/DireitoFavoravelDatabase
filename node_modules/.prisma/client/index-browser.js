
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ExternalWebhookHotmartReceiverScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  requestId: 'requestId',
  eventDate: 'eventDate',
  eventName: 'eventName',
  version: 'version',
  payload: 'payload'
};

exports.Prisma.HotmartOrderNoteScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  externalWebhookHotmartReceiverId: 'externalWebhookHotmartReceiverId',
  hotmartProductId: 'hotmartProductId',
  hotmartBuyerId: 'hotmartBuyerId',
  producerName: 'producerName',
  hotmartPurchaseId: 'hotmartPurchaseId',
  hotmartSubscriptionId: 'hotmartSubscriptionId'
};

exports.Prisma.HotmartProductScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  lastOrderDate: 'lastOrderDate',
  productUcode: 'productUcode',
  productName: 'productName',
  productHasCoProduction: 'productHasCoProduction'
};

exports.Prisma.HotmartAffiliatesScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  lastOrderDate: 'lastOrderDate',
  affiliateCode: 'affiliateCode',
  affiliateName: 'affiliateName',
  hotmartOrderNoteId: 'hotmartOrderNoteId'
};

exports.Prisma.HotmartBuyerScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  buyerEmail: 'buyerEmail',
  buyerDocument: 'buyerDocument',
  buyerName: 'buyerName',
  buyerCheckoutPhone: 'buyerCheckoutPhone',
  buyerAddressCountryIso: 'buyerAddressCountryIso',
  buyerAddressCountry: 'buyerAddressCountry',
  buyerAddressZipCode: 'buyerAddressZipCode',
  buyerAddressState: 'buyerAddressState',
  buyerAddressCity: 'buyerAddressCity',
  buyerAddressNeighborhood: 'buyerAddressNeighborhood',
  buyerAddressStreet: 'buyerAddressStreet',
  buyerAddressComplement: 'buyerAddressComplement',
  buyerAddressNumber: 'buyerAddressNumber',
  lastOrderDate: 'lastOrderDate'
};

exports.Prisma.HotmartCommissionsScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  sourceName: 'sourceName',
  value: 'value',
  currencyValue: 'currencyValue',
  convertedToCurrency: 'convertedToCurrency',
  convertedvalue: 'convertedvalue',
  currencyConvertionRate: 'currencyConvertionRate',
  hotmartPurchaseId: 'hotmartPurchaseId'
};

exports.Prisma.HotmartPurchaseScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  orderDate: 'orderDate',
  approvedDate: 'approvedDate',
  transactionId: 'transactionId',
  status: 'status',
  fullPriceValue: 'fullPriceValue',
  fullPriceCurrency: 'fullPriceCurrency',
  originalPriceValue: 'originalPriceValue',
  originalPriceCurrency: 'originalPriceCurrency',
  priceValue: 'priceValue',
  priceCurrency: 'priceCurrency',
  offerCode: 'offerCode',
  recurrencyNumber: 'recurrencyNumber',
  subscriptionAnticipationPurchase: 'subscriptionAnticipationPurchase',
  checkoutCountryName: 'checkoutCountryName',
  checkoutCountryISO: 'checkoutCountryISO',
  utmCode: 'utmCode',
  isOrderBump: 'isOrderBump',
  originalTransactionId: 'originalTransactionId',
  nextChargeDate: 'nextChargeDate'
};

exports.Prisma.HotmartPaymentInfosScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  barcode: 'barcode',
  billetUrl: 'billetUrl',
  pixCode: 'pixCode',
  pixQRCode: 'pixQRCode',
  pixExpirationDate: 'pixExpirationDate',
  type: 'type',
  refusalReason: 'refusalReason',
  installmentNumbers: 'installmentNumbers',
  hotmartPurchaseId: 'hotmartPurchaseId'
};

exports.Prisma.HotmartSubscriptionScalarFieldEnum = {
  id: 'id',
  creationDate: 'creationDate',
  updateDate: 'updateDate',
  deletionDate: 'deletionDate',
  planId: 'planId',
  subscriptionName: 'subscriptionName',
  subscriberCode: 'subscriberCode',
  subscriberStatus: 'subscriberStatus'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  ExternalWebhookHotmartReceiver: 'ExternalWebhookHotmartReceiver',
  HotmartOrderNote: 'HotmartOrderNote',
  HotmartProduct: 'HotmartProduct',
  HotmartAffiliates: 'HotmartAffiliates',
  HotmartBuyer: 'HotmartBuyer',
  HotmartCommissions: 'HotmartCommissions',
  HotmartPurchase: 'HotmartPurchase',
  HotmartPaymentInfos: 'HotmartPaymentInfos',
  HotmartSubscription: 'HotmartSubscription'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
